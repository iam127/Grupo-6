class MinStack:
    def __init__(self):
        self.stack = []
        self.min_stack = []

    def push(self, x):
        self.stack.append(x)
        if not self.min_stack or x <= self.min_stack[-1]:
            self.min_stack.append(x)

    def pop(self):
        if not self.stack:
            raise IndexError("Pop from empty stack")
        value = self.stack.pop()
        if value == self.min_stack[-1]:
            self.min_stack.pop()
        return value

    def top(self):
        if not self.stack:
            raise IndexError("Top from empty stack")
        return self.stack[-1]

    def getMin(self):
        if not self.min_stack:
            raise IndexError("GetMin from empty stack")
        return self.min_stack[-1]


# Test cases
def test_min_stack():
    stack = MinStack()
    stack.push(5)
    stack.push(3)
    stack.push(7)
    stack.push(2)

    print("Top:", stack.top())         
    print("Min:", stack.getMin())      

    stack.pop()                        
    print("Min after pop:", stack.getMin()) 

    stack.pop()                       
    print("Top after pop:", stack.top())     
    print("Min:", stack.getMin())            

    stack.pop()                        
    print("Min:", stack.getMin())           

    print("All tests passed!")

if __name__ == "__main__":
    test_min_stack()
